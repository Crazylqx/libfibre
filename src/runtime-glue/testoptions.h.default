// **** libfibre options - event handling

//#define TESTING_WORKER_POLLER         1 // poll events during idle loop
//#define TESTING_WORKER_IO_URING       1 // process io_uring events during idle loop (Linux only)

#define TESTING_CLUSTER_POLLER_FIBRE  1 // per-cluster poller(s): fibre vs. pthread
#define TESTING_CLUSTER_POLLER_FLOAT  1 // per-cluster poller fibres(s): float vs. background
#define TESTING_IO_TRYFIRST           1 // try nonblocking I/O operation first
//#define TESTING_EVENTPOLL_ONDEMAND    1 // use ondemand event polling
#define TESTING_EVENTPOLL_ONESHOT     1 // use oneshot event polling
//#define TESTING_EVENTPOLL_LEVEL       1 // use level-trigger event polling
//#define TESTING_POLLER_FIBRE_SPIN 65536 // poller fibre: spin loop of NB polls

//#define TESTING_IO_URING_DEFAULT      1 // make io_uring default for sockets

/******************************** lock options ********************************/

//#define TESTING_LOCK_RECURSION        1 // enable mutex recursion in C interface

//#define WORKER_LOCK_TYPE BinaryLock<>

/******************************** sanity checks ********************************/

#if !(TESTING_EVENTPOLL_LEVEL || TESTING_EVENTPOLL_ONDEMAND || TESTING_EVENTPOLL_ONESHOT || TESTING_IO_TRYFIRST)
  #error edge-triggered polling requires TESTING_IO_TRYFIRST
#endif

#if TESTING_WORKER_IO_URING && !__linux__
  #error TESTING_WORKER_IO_URING is only available on Linux
#endif

#if TESTING_WORKER_IO_URING && TESTING_WORKER_POLLER
  #error TESTING_WORKER_IO_URING and TESTING_WORKER_POLLER cannot be combined
#endif

#if !TESTING_WORKER_IO_URING && TESTING_IO_URING_DEFAULT
  #error TESTING_IO_URING_DEFAULT requires TESTING_WORKER_IO_URING
#endif

#if !TESTING_LOADBALANCING && TESTING_CLUSTER_POLLER_FIBRE
  #error TESTING_CLUSTER_POLLER_FIBRE requires TESTING_LOADBALANCING
#endif
